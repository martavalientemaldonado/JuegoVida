@startuml
'https://plantuml.com/class-diagram

Agua --|> Recurso:extends
Comida --|> Recurso:extends
Montaña --|> Recurso:extends
Tesoro --|> Recurso:extends
Biblioteca --|> Recurso:extends
Pozo --|> Recurso:extends
Individuo --|> Entorno
Recurso --|> Entorno

class Individuo{
-NumIdentificacion:Integer
-Generacion:Integer
-TurnosVidaInd: static double
EnMonimiento: boolean
ProbClonacion:double
ProbMuerte:double
ProbReproduccion:double
Tipo:int
Individuo()
Individuo(TurnosVidaInd:double, ProbClonacion:double, ProbReproduccion:double)
Individuo(NumIdentificacion:Integer, Generacion:Integer)
getNumIdentificacion():Integer
getGeneracion():Integer
getTurnosVidaInd(): static double
setTurnosVidaInd(TurnosVidaInd:double)
getProbClonacion():double
setProbClonacion(probClonacion:double)
getProbReproduccion():double
setProbReproduccion(probReproduccion:double)
getProbMuerte():double
setProbMuerte(probMuerte:double)
getTipo():int
setTipo(tipo:int)
Reproduccion()
Clonación()
Muerte()
rutaAleatoriaTBasico()
seleccionarRrecursoTAvanzado():Recurso
recursoCercanoTAvanzado():Recurso
rutarecursoTAvanzado()
recursoaleatorioTNormal()
rutalinearectaTNormal()
}


interface TableroDeJuego {
Filas
Columnas
Casillas
()
}
class Entorno{
numrrecursos
probnuevorecurrso
TurnosVidaRecursos
TurnosVidaIndividuo
ProbReproduccionInd
ProbClonacionInd
ProbMuerteInd
getNumrrecursos():Integer
setNumrrecursos()
nuevorrecurso()
getprobnuevorecurrso():Integer
setprobnuevorecurrso()
}
class Recurso{
ProbabilidadNuevoRE:static double
TurnosVidaRecursos:static double
Recurso()
Recurso(ProbNuevo:double, TurnVida:double)
getProbabilidadNuevoRE():static double
setProbabilidadNuevoRE(probabilidadNuevoRE:double)
getTurnosVidaRecursos():static double
setTurnosVidaRecursos(turnosVidaRecursos:double)
}


class Agua {
probabilidad
vidaproporcionada
getvidaproporcionada():Integer
setvidaproporcionada(Integer vida)
setProbabilidad(Integer probabilidad)
getProbabilidad():Integer
}
class Comida {
probabilidad
vidaproporcionada
getvidaproporcionada():Integer
setvidaproporcionada(Integer vida)
setProbabilidad(Integer probabilidad)
getProbabilidad():Integer
}
class Montaña {
probabilidad
vidaproporcionada
getvidaproporcionada():Integer
setvidaproporcionada(Integer vida)
setProbabilidad(Integer probabilidad)
getProbabilidad():Integer
}
class Tesoro {
probabilidad
reproduccionproporcionada
setProbabilidad()
getProbabilidad():Integer
getreproduccionproporcionada():Integer
setreproduccionproporcionada(Integer reproduccion)
}
class Biblioteca {
probclonproporcionada
probabilidad
setProbabilidad()
getProbabilidad():Integer
getprobclonproporcionada():Integer
setprobclonproporcionada(Integer clonacion)
setTipoIndividuo(**)
}
class Pozo {
probabilidad
setProbabilidad()
getProbabilidad():Integer
eliminarindividuo()
}
@enduml